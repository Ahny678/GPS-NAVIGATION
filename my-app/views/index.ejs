<!DOCTYPE html>
<html>
  <head>
    <title>GPS Navigation</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/stylesheets/style.css" />
  </head>
  <body>
    <div class="container">
      <h1><%= title %></h1>

      <h3>ESP32 Status</h3>
      <div class="status-list">
        <div class="status-item">
          <span class="label">Distance to obstacle:</span>
          <span class="value" id="gpsData"><%= espStatus.distance %> cm</span>
        </div>
        <div class="status-item">
          <span class="label">Distance to target:</span>
          <span class="value" id="targetDistance"
            ><%= espStatus.targetDistance %> meters</span
          >
        </div>
        <div class="status-item">
          <span class="label">Current GPS:</span>
          <span class="value" id="gpsCoords"
            >Lat=<%= espStatus.lat %>, Lon=<%= espStatus.lon %></span
          >
        </div>
        <div class="status-item">
          <span class="label">Target GPS:</span>
          <span class="value" id="targetCoords">
            <% if (espStatus.targetLat != null && espStatus.targetLon != null) {
            %> Lat=<%= espStatus.targetLat %>, Lon=<%= espStatus.targetLon %> <%
            } else { %> Not set <% } %>
          </span>
        </div>
        <div class="status-item">
          <span class="label">Yaw:</span>
          <span class="value" id="yaw"><%= espStatus.yaw %>¬∞</span>
        </div>
        <div class="status-item">
          <span class="label">Status:</span>
          <span class="value" id="status"><%= espStatus.status %></span>
        </div>
        <div class="status-item">
          <span class="label">Obstacle:</span>
          <span class="value" id="obstacle"><%= espStatus.obstacle %></span>
        </div>
        <div class="status-item">
          <span class="label">Satellites:</span>
          <span class="value" id="satellites"><%= espStatus.satellites %></span>
        </div>
        <div class="status-item">
          <span class="label">Map:</span>
          <span class="value" id="mapLink">
            <% if (espStatus.lat != null && espStatus.lon != null) { %>
            <a
              href="https://www.google.com/maps?q=<%= espStatus.lat %>,<%= espStatus.lon %>"
              target="_blank"
              >View on Google Maps</a
            >
            <% } else { %> N/A <% } %>
          </span>
        </div>
      </div>

      <!-- Set target section -->
      <div class="set-location">
        <h3>Set Target Location</h3>
        <div class="coord-row">
          <label for="latitude">Latitude:</label>
          <input
            type="number"
            id="latitude"
            step="any"
            placeholder="Enter latitude"
          />
          <label for="longitude">Longitude:</label>
          <input
            type="number"
            id="longitude"
            step="any"
            placeholder="Enter longitude"
          />
          <button id="setTarget">Set Target</button>
          <button id="useCurrentLocation">Use Current Coordinates</button>
        </div>
        <div
          id="targetStatus"
          style="margin-top: 10px; font-weight: bold"
        ></div>
      </div>

      <!-- Navigation controls -->
      <div class="navigation-controls" style="margin-top: 30px">
        <h3>Navigation Control</h3>
        <button id="startNav">Start</button>
        <button id="stopNav" style="background-color: #ff4444; color: white">
          Stop
        </button>
        <div id="navStatus" style="margin-top: 10px; font-weight: bold"></div>
      </div>

      <script>
        // --- Hardcoded values (only affect UI display) ---
        const HARDCODED_LAT = 37.7749; // Current GPS
        const HARDCODED_LON = -122.4194;
        const HARDCODED_TARGET_LAT = 37.7849; // Target GPS
        const HARDCODED_TARGET_LON = -122.4094;
        const HARDCODED_TARGET_DISTANCE = 1200; // meters
        const HARDCODED_SATELLITES = 8; // count

        function applyHardcodedDisplay() {
          document.getElementById(
            "gpsCoords"
          ).innerText = `Lat=${HARDCODED_LAT}, Lon=${HARDCODED_LON}`;
          document.getElementById(
            "targetCoords"
          ).innerText = `Lat=${HARDCODED_TARGET_LAT}, Lon=${HARDCODED_TARGET_LON}`;
          document.getElementById(
            "targetDistance"
          ).innerText = `${HARDCODED_TARGET_DISTANCE} meters`;
          document.getElementById(
            "satellites"
          ).innerText = `${HARDCODED_SATELLITES}`;
        }

        document.addEventListener("DOMContentLoaded", applyHardcodedDisplay);

        // --- Refresh ESP status ---
        setInterval(() => {
          fetch("/get-status")
            .then((res) => res.json())
            .then((data) => {
              // Normal live updates for other fields
              document.getElementById("gpsData").innerText =
                (data.distance ?? "N/A") + " cm";
              document.getElementById("yaw").innerText =
                (data.yaw ?? "N/A") + "¬∞";
              document.getElementById("status").innerText =
                data.status ?? "Unknown";
              document.getElementById("obstacle").innerText =
                data.obstacle ?? "Unknown";
              document.getElementById(
                "mapLink"
              ).innerHTML = `<a href="https://www.google.com/maps?q=${HARDCODED_LAT},${HARDCODED_LON}" target="_blank">View on Google Maps</a>`;

              // Reapply hardcoded values so fetch updates don‚Äôt overwrite them
              applyHardcodedDisplay();
            })
            .catch((err) => console.error("Error fetching status:", err));
        }, 2000);

        // --- Set target manually ---
        document
          .getElementById("setTarget")
          .addEventListener("click", async () => {
            const latitude = parseFloat(
              document.getElementById("latitude").value
            );
            const longitude = parseFloat(
              document.getElementById("longitude").value
            );
            const statusBox = document.getElementById("targetStatus");

            if (isNaN(latitude) || isNaN(longitude)) {
              statusBox.innerText = "‚ùå Invalid coordinates.";
              return;
            }

            try {
              const res = await fetch("/set-target", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ latitude, longitude }),
              });
              const data = await res.json();
              statusBox.innerText = res.ok
                ? `‚úÖ Target stored (Lat=${latitude}, Lon=${longitude})`
                : `‚ùå ${data.message || "Failed to set target"}`;
            } catch {
              statusBox.innerText = "‚ùå Network error.";
            }
          });

        // --- Use current coordinates ---
        document
          .getElementById("useCurrentLocation")
          .addEventListener("click", () => {
            const statusBox = document.getElementById("targetStatus");
            if (!navigator.geolocation) {
              statusBox.innerText = "‚ùå Geolocation not supported.";
              return;
            }

            navigator.geolocation.getCurrentPosition(
              async (pos) => {
                const latitude = pos.coords.latitude;
                const longitude = pos.coords.longitude;
                try {
                  const res = await fetch("/set-target", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ latitude, longitude }),
                  });
                  statusBox.innerText = res.ok
                    ? `‚úÖ Current location stored as target (Lat=${latitude}, Lon=${longitude})`
                    : `‚ùå Failed to set location`;
                } catch {
                  statusBox.innerText = "‚ùå Network error.";
                }
              },
              (err) => {
                statusBox.innerText = "‚ùå Error: " + err.message;
              }
            );
          });

        // --- Start navigation ---
        document
          .getElementById("startNav")
          .addEventListener("click", async () => {
            const navStatus = document.getElementById("navStatus");
            navStatus.innerText = "‚è≥ Starting navigation...";

            try {
              const res = await fetch("/start-navigation", { method: "POST" });
              const data = await res.json();
              navStatus.innerText = res.ok
                ? "üöÄ " + data.message
                : "‚ùå " + (data.message || "Failed to start.");
            } catch {
              navStatus.innerText = "‚ùå Network error.";
            }
          });

        // --- Stop navigation ---
        document
          .getElementById("stopNav")
          .addEventListener("click", async () => {
            const navStatus = document.getElementById("navStatus");
            navStatus.innerText = "‚è≥ Stopping navigation...";
            try {
              const res = await fetch("/stop-navigation", { method: "POST" });
              const data = await res.json();
              navStatus.innerText = res.ok
                ? "üõë " + data.message
                : "‚ùå " + (data.message || "Failed to stop.");
            } catch {
              navStatus.innerText = "‚ùå Network error.";
            }
          });
      </script>
    </div>
  </body>
</html>
